name: Build and Scan Docker Image

on:
  #push:
  #pull_request:
  workflow_dispatch: # Permette di avviare il workflow manualmente dalla UI di GitHub
    inputs:
      version_to_build:
        description: 'Specifica una versione specifica da compilare (es. 22.04). Lascia vuoto per compilare tutte le versioni.'
        required: false
        type: string
        default: '' # Valore di default vuoto per compilare tutte le versioni
jobs:
  build-and-push:
    secrets: inherit
    strategy:
      matrix:
        version: [latest, 24.04, 22.04, 20.04, 18.04]
      max-parallel: 1
      # non posso parallellizzare il processo perché l'upload delle immagini va in errore con "permission denied"

    # Esegui il job solo se l'input 'version_to_build' è vuoto (compila tutto)
    # OPPURE se 'version_to_build' corrisponde alla versione corrente della matrice
    if: ${{ inputs.version_to_build == '' || inputs.version_to_build == matrix.version }}

    uses: Neomediatech/gh-workflows/.github/workflows/build-and-push-docker-image.yml@main
    with:
      dockerfile: "Dockerfile.${{ matrix.version }}"
      dockerdir: "."
      dockertag: ${{ matrix.version }}

  scan-docker-image:
    secrets: inherit
    strategy:
      matrix:
        version: [latest, 24.04, 22.04, 20.04, 18.04]
    needs: [build-and-push]
    if: ${{ inputs.version_to_build == '' || inputs.version_to_build == matrix.version }}
    uses: Neomediatech/gh-workflows/.github/workflows/scan-docker-image.yml@main
    with:
      dockertag: ${{ matrix.version }}

  push-report-to-repo:
    strategy:
      matrix:
        version: [latest, 24.04, 22.04, 20.04, 18.04]
      max-parallel: 1
    needs: [scan-docker-image]
    if: ${{ inputs.version_to_build == '' || inputs.version_to_build == matrix.version }}
    secrets: inherit
    uses: Neomediatech/gh-workflows/.github/workflows/copy-file-to-another-repo.yml@main
    with:
      file_id: ${{ needs.scan-docker-image.outputs.uploaded-file-id }}
      filename: ${{ needs.scan-docker-image.outputs.file_to_copy_output }}
      dockertag: ${{ matrix.version }}

